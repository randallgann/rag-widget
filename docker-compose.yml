version: '3'

services:
  # Landing Page Frontend
  frontend:
    build:
      context: /home/rgann/test-landing-page
    ports:
      - "3003:80"
    environment:
      - API_URL=http://api-service:3001
    depends_on:
      - api-service

  # Consolidated API Service (handles both auth and admin portal functionality)
  api-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=youtube_rag
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_CALLBACK_URL=${AUTH0_CALLBACK_URL}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - SESSION_KEY=${AUTH0_SECRET}
      - FRONTEND_URL=http://localhost:3003
      - API_SERVICE_URL=http://localhost:3001
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_PUBSUB_TOPIC=${GCP_PUBSUB_TOPIC}
      - GCP_STORAGE_BUCKET=${GCP_STORAGE_BUCKET}
      - GCP_SECRET_MANAGER_ENABLED=${GCP_SECRET_MANAGER_ENABLED}
      - GCP_SERVICE_ACCOUNT_KEY_SECRET=${GCP_SERVICE_ACCOUNT_KEY_SECRET}
      # Set explicit path to credentials in the container
      - GOOGLE_APPLICATION_CREDENTIALS=/app/rag-widget-1b0f63fa8b77.json
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./node_modules:/app/node_modules
      - ./.env:/app/.env
      - ./rag-widget-1b0f63fa8b77.json:/app/rag-widget-1b0f63fa8b77.json
    restart: on-failure
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be fully initialized...'
        sleep 20 &&
        node dist/app.js
      "

  # PostgreSQL Database
  postgres:
    build:
      context: ./database
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=youtube_rag
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Chat Copilot WebAPI Service (Semantic Kernel)
  chat-copilot-webapi:
    image: chat-copilot-webapi
    build:
      context: /home/rgann/chat-copilot
      dockerfile: docker/webapi/Dockerfile
    ports:
      - "3080:8080"
    env_file:
      - /home/rgann/chat-copilot/docker/webapi/.env
    environment:
      - Authentication__Type=None
      - ASPNETCORE_ENVIRONMENT=Development
    # No dependencies on the qdrant or rabbitmq services since we're not including them

volumes:
  postgres_data: